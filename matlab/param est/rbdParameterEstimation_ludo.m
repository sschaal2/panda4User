function [beta_uc,beta_c] = rbdParameterEstimation_ludo(n_dofs,n_dofs_used,every,use_svd)
% function [beta_uc,beta_c] = rbdParameterEstimation(n_dofs,n_dofs_used,every,use_svd)
% performs the RBD parameter estimation with Bayesian regression
%
% n_dofs      (i): the number of DOFs in data file
% n_dofs_used (i): the subset 1:n_dofs_used to be used in the regression
%                  NOTE: the subset needs to be numbers 1:n_dofs_used
% every       (i): subsampling: only use "every" data point
% use_svd     (i): use SVD instead of Bayesian Linear Regression
%
% returns the unconstraint RBD parameters (beta_uc), and the constraint
% parameters (beta_c)

global XTX;
global beta_uc;
global beta_pred;

n_param = 14;

if (~exist('use_svd') || use_svd == 0),

  % read the data file generated by xpest
  disp('Read data ...');
  D = rbdReadData(n_dofs,n_dofs_used,every);
  disp('done');

  % split in to X and Y data
  X = D(:,1:n_dofs_used*n_param);
  Y = D(:,end);
  XTX = X'*X;

  % run BLR algorithm
  options.noise     = 1;
  options.threshold = 1e-6;
  options.numIter   = 10000;
  options.printFreq = 100;
  disp('Run Bayesian Linear Regression ...');
  result = noisyBLR(X,Y,options);
  disp('done');

  beta_uc = result.beta_true;
  W       = diag(result.prob);

else % use simple svd regression

  disp('Run SVD Regression ...');
  [XTX,XTY]=extractParmEstMatrices;
  XTX = XTX(1:(n_dofs_used+1)*n_param,1:(n_dofs_used+1)*n_param);
  XTY = XTY(1:(n_dofs_used+1)*n_param);
  beta_uc = pinv(XTX)*XTY;
  disp('done');
  inds = find(abs(beta_uc) < 1.e-6);
  W = ones(size(beta_uc));
  W(inds) = 0;
  W = diag(W);

end

% note that we explicity zero out the irrelevant regression parameters such that
% the cost function is not affected by them
XTX = W'*XTX*W;
XTX = XTX/norm(XTX,'fro');  % just to avoid numerically too big values

% project the parameters
disp('Project the result to physically correct parameters ...');
%vbeta = randn(size(beta_uc))*0.001;
vbeta = zeros(size(beta_uc));
vbeta(n_param+1:n_param*8) = ...
    [10.76 0.0 0.0 1.5         0.25       0 0  0.29       0 0.11             0 0 0 0 ...
    3.0   0.0 0.0 0.0         0.019      0 0  0.026      0 0.014            0 0 0 0 ...
   2     0.0  0.0  0.4       0.1367     0 0  0.1367     0 0.006            0 0 0 0 ...
   0.5   0.0  0.0  0.0       0.0001     0 0  0.0001     0 0.001            0 0 0 0 ...
   2.4   0.0  0.0  0.3184    0.057      0 0  0.057      0 0.003            0 0 0 0 ...
   0.123 0.0  0.0  0.00      0.00007817 0 0  0.00005587 0 0.00006594       0 0 0 0 ...
   1.0   0.0  0.0  0.01      0.0001     0 0  0.0001     0 0.001            0 0 0 0];

options = optimset('GradObj','on','TolFun',1e-13,'MaxFunEvals',1e6,'Display','iter','MaxIter',2000, 'TolX', 1e-8);
vbeta = fminunc(@rbdParameterProjection,vbeta,options);
disp('done');

beta_c = beta_pred.*diag(W);

% make sure the non-estimated links have zero parameters, as this is the
% way the estimation was performed
beta_uc = [beta_uc; zeros((n_dofs-n_dofs_used)*n_param,1)];
beta_c  = [beta_c; zeros((n_dofs-n_dofs_used)*n_param,1)];